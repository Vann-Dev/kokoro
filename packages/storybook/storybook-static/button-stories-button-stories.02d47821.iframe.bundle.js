"use strict"; (self.webpackChunk_sage_ui_storybook = self.webpackChunk_sage_ui_storybook || []).push([[658], { "../components/button/stories/button.stories.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__) => { __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, { Danger: () => Danger, Ghost: () => Ghost, Link: () => Link, Outline: () => Outline, Primary: () => Primary, Secondary: () => Secondary, Warning: () => Warning, __namedExportsOrder: () => __namedExportsOrder, default: () => button_stories }); var react = __webpack_require__("../../node_modules/.pnpm/next@14.0.4_@babel+core@7.23.6_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/index.js"), button_button = (0, __webpack_require__("../../node_modules/.pnpm/tailwind-variants@0.1.19_tailwindcss@3.4.0/node_modules/tailwind-variants/dist/index.js").tv)({ base: "font-medium px-6 py-3 rounded-lg hover:opacity-80 transition-opacity duration-100", variants: { color: { primary: "bg-[#4FB055]", secondary: "bg-zinc-600", outline: "border-[#4FB055] border-2 text-white", danger: "bg-red-700", warning: "bg-yellow-600", ghost: "bg-transparent", link: "hover:underline" }, size: { sm: "text-sm", md: "text-base", lg: "text-lg px-8 py-4" } }, defaultVariants: { size: "sm", color: "primary" } }), __jsx = react.createElement, Button = react.forwardRef((function (props, ref) { return __jsx("button", { ref, className: button_button({ color: props.color, size: props.size }) }, props.label ? props.label : "kokoro UI Button") })); try { Button.displayName = "Button", Button.__docgenInfo = { description: "", displayName: "Button", props: { color: { defaultValue: null, description: "", name: "color", required: !0, type: { name: "any" } }, size: { defaultValue: null, description: "", name: "size", required: !1, type: { name: "any" } }, label: { defaultValue: null, description: "", name: "label", required: !0, type: { name: "string" } } } }, "undefined" != typeof STORYBOOK_REACT_CLASSES && (STORYBOOK_REACT_CLASSES["../components/button/src/button.tsx#Button"] = { docgenInfo: Button.__docgenInfo, name: "Button", path: "../components/button/src/button.tsx#Button" }) } catch (__react_docgen_typescript_loader_error) { } const button_stories = { title: "Button", component: Button, parameters: { layout: "centered" }, tags: ["autodocs"], argTypes: { color: { control: { type: "select" }, options: ["primary", "secondary", "warning", "danger"] }, size: { control: { type: "select" }, options: ["sm", "md", "lg"] } } }; var Primary = { args: { label: "Primary", color: "primary" } }, Secondary = { args: { label: "Secondary", color: "secondary" } }, Outline = { args: { label: "Outline", color: "outline" } }, Warning = { args: { label: "Warning", color: "warning" } }, Danger = { args: { label: "Danger", color: "danger" } }, Ghost = { args: { label: "Ghost", color: "ghost" } }, Link = { args: { label: "Link", color: "link" } }; Primary.parameters = { ...Primary.parameters, docs: { ...Primary.parameters?.docs, source: { originalSource: '{\n  args: {\n    label: "Primary",\n    color: "primary"\n  }\n}', ...Primary.parameters?.docs?.source } } }, Secondary.parameters = { ...Secondary.parameters, docs: { ...Secondary.parameters?.docs, source: { originalSource: '{\n  args: {\n    label: "Secondary",\n    color: "secondary"\n  }\n}', ...Secondary.parameters?.docs?.source } } }, Outline.parameters = { ...Outline.parameters, docs: { ...Outline.parameters?.docs, source: { originalSource: '{\n  args: {\n    label: "Outline",\n    color: "outline"\n  }\n}', ...Outline.parameters?.docs?.source } } }, Warning.parameters = { ...Warning.parameters, docs: { ...Warning.parameters?.docs, source: { originalSource: '{\n  args: {\n    label: "Warning",\n    color: "warning"\n  }\n}', ...Warning.parameters?.docs?.source } } }, Danger.parameters = { ...Danger.parameters, docs: { ...Danger.parameters?.docs, source: { originalSource: '{\n  args: {\n    label: "Danger",\n    color: "danger"\n  }\n}', ...Danger.parameters?.docs?.source } } }, Ghost.parameters = { ...Ghost.parameters, docs: { ...Ghost.parameters?.docs, source: { originalSource: '{\n  args: {\n    label: "Ghost",\n    color: "ghost"\n  }\n}', ...Ghost.parameters?.docs?.source } } }, Link.parameters = { ...Link.parameters, docs: { ...Link.parameters?.docs, source: { originalSource: '{\n  args: {\n    label: "Link",\n    color: "link"\n  }\n}', ...Link.parameters?.docs?.source } } }; const __namedExportsOrder = ["Primary", "Secondary", "Outline", "Warning", "Danger", "Ghost", "Link"] } }]);